<Activity mc:Ignorable="sap sap2010" x:Class="InitAllSettings" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:njl="clr-namespace:Newtonsoft.Json.Linq;assembly=Newtonsoft.Json" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.ComponentModel;assembly=System.ComponentModel.TypeConverter" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="out_dicTransactionData" Type="OutArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="out_dicLanguage" Type="OutArgument(scg:Dictionary(x:String, x:String))" />
    <x:Property Name="out_dicBotReadyConfig" Type="OutArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="out_dicKeysMap" Type="OutArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="out_bFirstTransaction" Type="OutArgument(x:Boolean)" />
    <x:Property Name="out_dtNotAllowedHours" Type="OutArgument(sd:DataTable)" />
    <x:Property Name="out_strQueueItemReference" Type="OutArgument(x:String)" />
    <x:Property Name="intAmountOfInputsToProcess" Type="OutArgument(x:Int32)" />
    <x:Property Name="out_Config" Type="OutArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="in_strConfigMode" Type="InArgument(x:String)" />
  </x:Members>
  <this:InitAllSettings.in_strConfigMode>
    <InArgument x:TypeArguments="x:String" />
  </this:InitAllSettings.in_strConfigMode>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>861,4605</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>InitAllSettings_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="34">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>System.Dynamic</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Collections.Specialized</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.Web.Activities</x:String>
      <x:String>System.Xml.Serialization</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="102">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>netstandard</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.Collections.Specialized</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="InitAllSettings" sap:VirtualizedContainerService.HintSize="575,4540" sap2010:WorkflowViewState.IdRef="Sequence_6">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="strRobotNameUiPath" />
      <Variable x:TypeArguments="x:String" Name="strLanguageBaseFolderPath" />
      <Variable x:TypeArguments="x:String" Name="strSettingsBaseFolderPath" />
      <Variable x:TypeArguments="njl:JObject" Name="jsonEnvironment" />
      <Variable x:TypeArguments="x:String" Name="strLanguageEnvFolderPath" />
      <Variable x:TypeArguments="x:String" Name="strSettingsEnvFolderPath" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message - Start" sap:VirtualizedContainerService.HintSize="513,92" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;InitAllSettings - Init&quot;]" />
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Framework\GetConfigRoot.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="513,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_12" UnSafe="False" WorkflowFileName="fwk\fwk_GetConfigRoot.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <OutArgument x:TypeArguments="x:String" x:Key="out_strRobotNameUiPath">[strRobotNameUiPath]</OutArgument>
        <OutArgument x:TypeArguments="njl:JObject" x:Key="out_jsonEnvironment">[jsonEnvironment]</OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="out_strLanguageBaseFolderPath">[strLanguageBaseFolderPath]</OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="out_strSettingsBaseFolderPath">[strSettingsBaseFolderPath]</OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="out_strLanguageEnvFolderPath">[strLanguageEnvFolderPath]</OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="out_strSettingsEnvFolderPath">[strSettingsEnvFolderPath]</OutArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_strConfigMode">[in_strConfigMode]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Framework\ConfigMode.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="513,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_13" UnSafe="False" WorkflowFileName="fwk\fwk_ConfigMode.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_strConfigMode">[in_strConfigMode]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_strProjectName">[strRobotNameUiPath]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_strBaseSettingsFolder">[strSettingsBaseFolderPath]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_strBaseLanguageFolder">[strLanguageBaseFolderPath]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_strEnvSettingsFolder">[strSettingsEnvFolderPath]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_strEnvLanguageFolder">[strLanguageEnvFolderPath]</InArgument>
        <InArgument x:TypeArguments="njl:JObject" x:Key="in_jsonEnvironment">[jsonEnvironment]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
    <Sequence DisplayName="Configuración" sap:VirtualizedContainerService.HintSize="513,2935" sap2010:WorkflowViewState.IdRef="Sequence_5">
      <Sequence.Variables>
        <Variable x:TypeArguments="njl:JArray" Name="jaSettingsPaths" />
      </Sequence.Variables>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Sequence DisplayName="Initialize variables" sap:VirtualizedContainerService.HintSize="451,273" sap2010:WorkflowViewState.IdRef="Sequence_7">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <Assign DisplayName="Initialize dicTransactionData" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="Assign_13">
          <Assign.To>
            <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[out_dicTransactionData]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[new Dictionary(Of String, Object)]</InArgument>
          </Assign.Value>
        </Assign>
        <Assign DisplayName="Assign - jaConfigPaths" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="Assign_12">
          <Assign.To>
            <OutArgument x:TypeArguments="njl:JArray">[jaSettingsPaths]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="njl:JArray">[new JArray()]</InArgument>
          </Assign.Value>
        </Assign>
      </Sequence>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="get fwksetup.json base" sap:VirtualizedContainerService.HintSize="451,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_14" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="fwk\fwk_InitAllSettingsJson.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFolder">[new DirectoryInfo(strSettingsBaseFolderPath).FullName]</InArgument>
          <InArgument x:TypeArguments="s:String[]" x:Key="in_ConfigFiles">[{"FWKSetup"}]</InArgument>
          <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="io_Config">[out_Config]</InOutArgument>
          <InOutArgument x:TypeArguments="njl:JArray" x:Key="io_jaConfigPaths">[jaSettingsPaths]</InOutArgument>
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
      <ui:IfElseIf DisplayName="get environment fwksetup.json if exists" sap:VirtualizedContainerService.HintSize="451,308" sap2010:WorkflowViewState.IdRef="IfElseIf_1">
        <ui:IfElseIf.ConditionBlocks>
          <sc:BindingList x:TypeArguments="ui:IfElseIfBlock" AllowEdit="True" AllowNew="True" AllowRemove="True" RaiseListChangedEvents="True">
            <ui:IfElseIfBlock BlockType="If" Condition="[Directory.Exists(strSettingsEnvFolderPath)]">
              <ui:IfElseIfBlock.Then>
                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="get fwksetup.json env" sap:VirtualizedContainerService.HintSize="334,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_24" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="fwk\fwk_InitAllSettingsJson.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFolder">[new DirectoryInfo(strSettingsEnvFolderPath).FullName]</InArgument>
                    <InArgument x:TypeArguments="s:String[]" x:Key="in_ConfigFiles">[{"FWKSetup"}]</InArgument>
                    <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="io_Config">[out_Config]</InOutArgument>
                    <InOutArgument x:TypeArguments="njl:JArray" x:Key="io_jaConfigPaths">[jaSettingsPaths]</InOutArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:InvokeWorkflowFile>
              </ui:IfElseIfBlock.Then>
            </ui:IfElseIfBlock>
          </sc:BindingList>
        </ui:IfElseIf.ConditionBlocks>
      </ui:IfElseIf>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke InitAllSettings workflow" sap:VirtualizedContainerService.HintSize="451,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_15" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="fwk\fwk_InitAllSettingsJson.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFolder">[new DirectoryInfo(strSettingsBaseFolderPath).FullName]</InArgument>
          <InArgument x:TypeArguments="s:String[]" x:Key="in_ConfigFiles">[out_Config("FilesToLoad").ToString.Split(","c)]</InArgument>
          <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="io_Config">[out_Config]</InOutArgument>
          <InOutArgument x:TypeArguments="njl:JArray" x:Key="io_jaConfigPaths">[jaSettingsPaths]</InOutArgument>
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Init BotReady" sap:VirtualizedContainerService.HintSize="451,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_16" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="fwk\fwk_InitAllSettingsJson.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFolder">[new DirectoryInfo(strSettingsBaseFolderPath).FullName]</InArgument>
          <InArgument x:TypeArguments="s:String[]" x:Key="in_ConfigFiles">[out_Config("BotReadyFile").ToString.Split(","c)]</InArgument>
          <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="io_Config">[out_dicBotReadyConfig]</InOutArgument>
          <InOutArgument x:TypeArguments="njl:JArray" x:Key="io_jaConfigPaths">[jaSettingsPaths]</InOutArgument>
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
      <ui:IfElseIf DisplayName="get environment settings if exists" sap:VirtualizedContainerService.HintSize="451,572" sap2010:WorkflowViewState.IdRef="IfElseIf_2">
        <ui:IfElseIf.ConditionBlocks>
          <sc:BindingList x:TypeArguments="ui:IfElseIfBlock" AllowEdit="True" AllowNew="True" AllowRemove="True" RaiseListChangedEvents="True">
            <ui:IfElseIfBlock BlockType="If" Condition="[Directory.Exists(strSettingsEnvFolderPath)]">
              <ui:IfElseIfBlock.Then>
                <Sequence DisplayName="get env settings" sap:VirtualizedContainerService.HintSize="400,377" sap2010:WorkflowViewState.IdRef="Sequence_8">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="env settings" sap:VirtualizedContainerService.HintSize="338,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_25" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="fwk\fwk_InitAllSettingsJson.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFolder">[new DirectoryInfo(strSettingsEnvFolderPath).FullName]</InArgument>
                      <InArgument x:TypeArguments="s:String[]" x:Key="in_ConfigFiles">[out_Config("FilesToLoad").ToString.Split(","c)]</InArgument>
                      <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="io_Config">[out_Config]</InOutArgument>
                      <InOutArgument x:TypeArguments="njl:JArray" x:Key="io_jaConfigPaths">[jaSettingsPaths]</InOutArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                  </ui:InvokeWorkflowFile>
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Init env BotReady" sap:VirtualizedContainerService.HintSize="338,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_26" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="fwk\fwk_InitAllSettingsJson.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFolder">[new DirectoryInfo(strSettingsEnvFolderPath).FullName]</InArgument>
                      <InArgument x:TypeArguments="s:String[]" x:Key="in_ConfigFiles">[out_Config("BotReadyFile").ToString.Split(","c)]</InArgument>
                      <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="io_Config">[out_dicBotReadyConfig]</InOutArgument>
                      <InOutArgument x:TypeArguments="njl:JArray" x:Key="io_jaConfigPaths">[jaSettingsPaths]</InOutArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                  </ui:InvokeWorkflowFile>
                </Sequence>
              </ui:IfElseIfBlock.Then>
            </ui:IfElseIfBlock>
          </sc:BindingList>
        </ui:IfElseIf.ConditionBlocks>
      </ui:IfElseIf>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke InitLanguage workflow" sap:VirtualizedContainerService.HintSize="451,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_17" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="fwk\fwk_InitLanguage.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="io_Config">[out_dicLanguage]</InOutArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_strLanguageFolder">[new DirectoryInfo(strLanguageBaseFolderPath).FullName]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_strLanguage">[out_Config("Language").ToString]</InArgument>
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
      <ui:IfElseIf DisplayName="get environment language if exists" sap:VirtualizedContainerService.HintSize="451,308" sap2010:WorkflowViewState.IdRef="IfElseIf_3">
        <ui:IfElseIf.ConditionBlocks>
          <sc:BindingList x:TypeArguments="ui:IfElseIfBlock" AllowEdit="True" AllowNew="True" AllowRemove="True" RaiseListChangedEvents="True">
            <ui:IfElseIfBlock BlockType="If" Condition="[Directory.Exists(strSettingsEnvFolderPath)]">
              <ui:IfElseIfBlock.Then>
                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="get env language" sap:VirtualizedContainerService.HintSize="334,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_29" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="fwk\fwk_InitLanguage.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="io_Config">[out_dicLanguage]</InOutArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_strLanguageFolder">[new DirectoryInfo(strLanguageEnvFolderPath).FullName]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_strLanguage">[out_Config("Language").ToString]</InArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
              </ui:IfElseIfBlock.Then>
            </ui:IfElseIfBlock>
          </sc:BindingList>
        </ui:IfElseIf.ConditionBlocks>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:IfElseIf>
      <ui:IfElseIf DisplayName="Else If - Attended user allowed to run?" sap:VirtualizedContainerService.HintSize="451,285" sap2010:WorkflowViewState.IdRef="IfElseIf_4">
        <ui:IfElseIf.ConditionBlocks>
          <sc:BindingList x:TypeArguments="ui:IfElseIfBlock" AllowEdit="True" AllowNew="True" AllowRemove="True" RaiseListChangedEvents="True">
            <ui:IfElseIfBlock BlockType="If" Condition="[Not String.IsNullOrEmpty(out_Config(&quot;UsersAllowedToExecute&quot;).ToString) AndAlso not out_Config(&quot;UsersAllowedToExecute&quot;).ToString.ToLower.Split(&quot;,&quot;c).Contains(Environment.UserName.ToString.ToLower)]">
              <ui:IfElseIfBlock.Then>
                <Throw DisplayName="Throw -  User is not allowed" Exception="[new SystemException(&quot;The user is not allowed to execute this process.&quot;)]" sap:VirtualizedContainerService.HintSize="334,90" sap2010:WorkflowViewState.IdRef="Throw_1" />
              </ui:IfElseIfBlock.Then>
            </ui:IfElseIfBlock>
          </sc:BindingList>
        </ui:IfElseIf.ConditionBlocks>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:IfElseIf>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="fwk_ApplyActions.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="451,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_23" UnSafe="False" WorkflowFileName="fwk\fwk_ApplyActions.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_dicLanguage">[out_dicLanguage]</InArgument>
          <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[out_Config]</InArgument>
          <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="io_dicTransactionData">[out_dicTransactionData]</InOutArgument>
          <InArgument x:TypeArguments="njl:JArray" x:Key="in_jaConfigPaths">[jaSettingsPaths]</InArgument>
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Utils_GetMap workflow" sap:VirtualizedContainerService.HintSize="451,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_18" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Utils\Utils_GetMap.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="in_strPathExcelMap">[new FileInfo(out_Config("PathKeysMapping").ToString).FullName]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_strLeftKey">[out_Config("LeftKeyKeysMapping").ToString]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_strRightKey">[out_Config("RightKeyKeysMapping").ToString]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_strSheetMap">[out_Config("SheetKeysMapping").ToString]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_strRangeMap">[out_Config("RangeKeysMapping").ToString]</InArgument>
          <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="out_dicMap">[out_dicKeysMap]</OutArgument>
          <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_dicLanguage">[out_dicLanguage]</InArgument>
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
    </Sequence>
    <Assign sap2010:Annotation.AnnotationText="try to convert batchsize to int.&#xA;if is not a number, assign -1 to process all queue items" DisplayName="Assign batch size" sap:VirtualizedContainerService.HintSize="513,118" sap2010:WorkflowViewState.IdRef="Assign_7">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Object">[out_Config("BatchSize")]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Object">[If(Int32.TryParse(out_Config("BatchSize").ToString, New Int32()),CInt(out_Config("BatchSize")),-1)]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke - KillAllProcesses" sap:VirtualizedContainerService.HintSize="513,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_19" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="fwk\fwk_KillAllProcesses.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[out_Config]</InArgument>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_dicLanguage">[out_dicLanguage]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke - Utils_GetNotAllowedHoursTable" sap:VirtualizedContainerService.HintSize="513,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_21" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="fwk\fwk_GetNotAllowedHoursTable.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[out_Config]</InArgument>
        <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_dtNotAllowedHours">[out_dtNotAllowedHours]</OutArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <Assign DisplayName="set reference" sap:VirtualizedContainerService.HintSize="513,61" sap2010:WorkflowViewState.IdRef="Assign_8">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[out_strQueueItemReference]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[Environment.UserName+Environment.MachineName+now.ToString("yyyyMMddHHmmss")]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="set intAmountOfInputsToProcess" sap:VirtualizedContainerService.HintSize="513,65" sap2010:WorkflowViewState.IdRef="Assign_9">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">[intAmountOfInputsToProcess]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32" xml:space="preserve">[If(CInt(out_Config("InputMode"))=2, _
If(Not String.IsNullOrEmpty(out_Config("AmountOfInputsToProcess").ToString),CInt(out_Config("AmountOfInputsToProcess")),0) _
,0)]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Calendar_GetLastWorkingDate workflow" sap:VirtualizedContainerService.HintSize="513,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_22" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Utils\Calendar\Calendar_GetLastWorkingDate.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_dicLanguage">[out_dicLanguage]</InArgument>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[out_Config]</InArgument>
        <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="io_dicTransactionData">[out_dicTransactionData]</InOutArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
    <Assign DisplayName="initialize bFirstTransaction" sap:VirtualizedContainerService.HintSize="513,61" sap2010:WorkflowViewState.IdRef="Assign_11">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Boolean">[out_bFirstTransaction]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Boolean">True</InArgument>
      </Assign.Value>
    </Assign>
    <ui:LogMessage DisplayName="Log Message - End" sap:VirtualizedContainerService.HintSize="513,92" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[&quot;InitAllSettings - End&quot;]" />
  </Sequence>
</Activity>